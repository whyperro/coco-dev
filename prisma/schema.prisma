generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id         String   @id @default(cuid())
  first_name String
  last_name  String
  username   String   @unique
  password   String
  user_role  Role     @default(SELLER)
  branchId   String?
  updated_by String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  branch     Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

model Branch {
  id             String   @id @default(cuid())
  location_name  String   @unique
  fiscal_address String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  tickets        Ticket[]
  user           User[]
}

model Provider {
  id              String       @id @default(cuid())
  provider_number String       @unique
  name            String
  credit          Float        @default(0)
  provider_type   ProviderType
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  tickets         Ticket[]
}

model Client {
  id           String      @id @default(cuid())
  first_name   String
  last_name    String
  dni          String      @unique
  email        String?
  phone_number String?
  updated_by   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  passenger    Passanger[]
}

model Passanger {
  id           String        @id @default(cuid())
  first_name   String
  last_name    String
  dni_type     DoctumentType @default(V)
  dni_number   String        @unique
  phone_number String?
  email        String?
  clientId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ticket       Ticket[]
}

model Ticket {
  id               String       @id @default(cuid())
  ticket_number    String       @unique
  booking_ref      String
  purchase_date    String
  flight_date      String
  registered_by    String
  updated_by       String?
  issued_by        String
  served_by        String
  status           TicketStatus @default(PENDIENTE)
  ticket_type      TicketType   @default(B)
  doc_order        Boolean      @default(true)
  description      String
  void_description VoidReason?
  ticket_price     Float
  fee              Float
  total            Float
  rate             Float
  total_bs         Float
  passangerId      String
  branchId         String
  providerId       String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  statusUpdatedAt  DateTime?
  branch           Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  passanger        Passanger    @relation(fields: [passangerId], references: [id], onDelete: Cascade)
  provider         Provider     @relation(fields: [providerId], references: [id])
  transaction      Transaction?
  routes           Route[]      @relation("TicketRoutes")
}

model Transaction {
  id               String         @id @default(cuid())
  payment_ref      String?
  payment_method   PaymentMethod? @default(EFECTIVO)
  image_ref        String?
  registered_by    String
  updated_by       String?
  transaction_date DateTime
  ticketId         String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ticket           Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Route {
  id         String    @id @default(cuid())
  origin     String
  destiny    String
  scale      String?
  route_type RouteType @default(NACIONAL)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tickets    Ticket[]  @relation("TicketRoutes")
}

enum Role {
  SELLER
  SUPERADMIN
  ADMINISTRADOR
  AUDITOR
}

enum DoctumentType {
  V
  J
  E
  PARTIDA_NACIMIENTO
  PASAPORTE
}

enum ProviderType {
  AEROLINEA
  AGENCIA_TERCERO
}

enum TicketStatus {
  PAGADO
  POR_CONFIRMAR
  PENDIENTE
  CANCELADO
}

enum TicketType {
  B
  X
}

enum RouteType {
  NACIONAL
  INTERNACIONAL
}

enum PaymentMethod {
  PAGO_MOVIL
  EFECTIVO
  ZELLE
  CREDITO
  DEBITO
  TRANSFERENCIA
}

enum VoidReason {
  CancelledByClient
  WrongSellerInput
  WrongClientInfo
  ClientDidNotPay
}
